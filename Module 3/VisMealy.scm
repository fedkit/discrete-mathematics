(define (main)
  (let* ((n (read))
         (m (read))
         (q (read))
         (goMatrix-delta (make-vector n))
         (exitMatrix-fi (make-vector n))
         (alphabet (make-vector 27)))
    (do ((i 0 (+ i 1)))
        ((= i 27))
      (vector-set! alphabet i (integer->char (+ i 97))))
    (do ((i 0 (+ i 1)))
        ((= i n))
      (vector-set! goMatrix-delta i (make-vector m)))
    (do ((i 0 (+ i 1)))
        ((= i n))
      (vector-set! exitMatrix-fi i (make-vector m)))
    (do ((i 0 (+ i 1)))
        ((= i n))
      (do ((j 0 (+ j 1)))
          ((= j m))
        (vector-set! (vector-ref goMatrix-delta i) j (read))))
    (do ((i 0 (+ i 1)))
        ((= i n))
      (do ((j 0 (+ j 1)))
          ((= j m))
        (vector-set! (vector-ref exitMatrix-fi i) j (read))))
    (display "digraph {\n    rankdir = LR\n")
    (do ((i 0 (+ i 1))
         (q 0 (+ q 1)))
        ((= i n))
      (do ((j 0 (+ j 1)))
          ((= j m))
        (display "    ")
        (display i)
        (display " -> ")
        (display (vector-ref (vector-ref goMatrix-delta i) j))
        (display " [label = \"")
        (display (vector-ref alphabet j))
        (display "(")
        (display (vector-ref (vector-ref exitMatrix-fi i) j))
        (display ")\"]\n"))))
    (display "}\n"))

(main)
